// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "XPalm_types.hpp"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// runFolder
Rcpp::List runFolder(Rcpp::String folder);
RcppExport SEXP _XPalm_runFolder(SEXP folderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type folder(folderSEXP);
    rcpp_result_gen = Rcpp::wrap(runFolder(folder));
    return rcpp_result_gen;
END_RCPP
}
// runDF
Rcpp::List runDF(Rcpp::List dfParameters, Rcpp::List dfMeteo);
RcppExport SEXP _XPalm_runDF(SEXP dfParametersSEXP, SEXP dfMeteoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type dfParameters(dfParametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dfMeteo(dfMeteoSEXP);
    rcpp_result_gen = Rcpp::wrap(runDF(dfParameters, dfMeteo));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_XPalm_runFolder", (DL_FUNC) &_XPalm_runFolder, 1},
    {"_XPalm_runDF", (DL_FUNC) &_XPalm_runDF, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_XPalm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
